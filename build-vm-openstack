#!/bin/bash
#
# Openstack specific functions
#
################################################################
#
# Copyright (c) 1995-2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################


_get_field() {
    echo -n "$1"|perl -n -e "\$_ =~ /^\|\s+$2\s+\|\s+(\S*)\s+\|\$/ && print \$1"
}

_get_disk_state() {
    OUT=$($CINDERCLIENT show "$1")
    _get_field "$OUT" status
}

cinder_volume2id() {
  VM_VOL_NAME=$1
  OUT=$($CINDERCLIENT show $VM_VOL_NAME)
  _get_field "$OUT" id
}

cloud_volume_attach_openstack() {
    local VM_SERVER="$1"
    local VM_VOL_NAME="$2"
    local VM_VOL_ID=$(cinder_volume2id $VM_VOL_NAME)

    # Example output of "nova volume-attach
    # +----------+--------------------------------------+
    # | Property | Value                                |
    # +----------+--------------------------------------+
    # | device   | /dev/vdb                             |
    # | id       | 793e9a04-7068-4cf1-86e7-26509f709b54 |
    # | serverId | 175e470c-5869-4425-988a-6b334a2fa655 |
    # | volumeId | 793e9a04-7068-4cf1-86e7-26509f709b54 |
    # +----------+--------------------------------------+
    OUT=$($NOVACLIENT volume-attach "$VM_SERVER" "$VM_VOL_ID")

    if [ $? -gt 0 ] ; then
	echo "ERROR: nova attach failed. $?" >&2
	return 3
    fi
    device_path=`_get_field "$OUT" device`
    serverId=`_get_field "$OUT" serverId`
    while true; do
	state=`_get_disk_state "$VM_VOL_NAME"`
	test "$state" = "in-use" && break
        if test -z "$state" ; then
	    echo "ERROR: unable to find state of volume $VM_VOL_NAME" >&2
            return 3
        fi
        if test "$state" = available ; then
	    echo "WARNING: volume $VM_VOL_NAME got not attached, retrying" >&2
	    OUT=`$NOVACLIENT volume-attach "$VM_SERVER" "$VM_VOL_ID"`

	    if [ $? -gt 0 ] ; then
		echo "ERROR: nova attach failed. $?" >&2
		return 3
	    fi
	    device_path=`_get_field "$OUT" device`
        fi
        sleep 3
    done

    # Example:
    # 793e9a04-7068-4cf1-86e7-26509f709b54:175e470c-5869-4425-988a-6b334a2fa655:/dev/vdb
    echo "$VM_VOL_ID:$serverId:$device_path"

}

cloud_volume_detach_openstack() {

    if [ "$1" = "__not_attached__" ];then
        echo "Skipping detach because device is not attached to any server"
        return 0
    fi

    local VM_SERVER=${1:37:36}
    local VM_VOL_ID=${1:0:36}

    if [ -z "$VM_SERVER" -o -z "$VM_VOL_ID" ];then
        # Cannot proceed anyway - guess volume never got attached
        echo "__not_attached__"
        return 0
    fi

    # needed at all?
    $NOVACLIENT volume-detach "$VM_SERVER" "$VM_VOL_ID"

    state=`_get_disk_state $VM_VOL_ID`

    while [ "$state" = detaching ];do
        sleep 1
        state=`_get_disk_state $VM_VOL_ID`
    done

    if [ "$state" = "available" ];then
        echo "__not_attached__"
        return 0
    fi
    # umount seems not to be enough
    sync
    
    if ! $NOVACLIENT volume-detach "$VM_SERVER" "$VM_VOL_ID"; then
	echo "ERROR: nova detach of $VM_VOL_ID failed." >&2
        return 3
    fi
    while [ "$state" != "available" ]; do
        state=`_get_disk_state $VM_VOL_ID`
	sleep 3
    done
    return 0

}

vm_verify_options_openstack() {

    # Checking for required tools (nova and cinder)
    
    NOVACLIENT=`type -p nova`
    if test -z "$NOVACLIENT" ; then
        cleanup_and_exit 3 "ERROR: nova not installed. Please install nova and try again"
    fi

    CINDERCLIENT=`type -p cinder`
    if test -z "$CINDERCLIENT" ; then
        cleanup_and_exit 3 "ERROR: nova not installed. Please install cinder and try again"
    fi

    # verify options

    if test -z "$OS_AUTH_URL" ; then
	cleanup_and_exit 3 "ERROR: No openstack environment set. This vm-type works only inside of an openstack VM."
    fi
    if test -z "$VM_KERNEL" ; then
	cleanup_and_exit 3 "ERROR: No worker root VM volume name specified."
    fi
    if test -z "$VM_IMAGE" ; then
	cleanup_and_exit 3 "ERROR: No worker root VM volume name specified."
    fi
    if test -z "$VM_SWAP" ; then
	cleanup_and_exit 3 "ERROR: No worker swap VM volume name specified."
    fi
    if test -z "$VM_SERVER" ; then
	cleanup_and_exit 3 "ERROR: No VM server node name specified (usually this instance)."
    fi
    if test -z "$VM_WORKER" ; then
	cleanup_and_exit 3 "ERROR: No VM worker node name specified (the instance to be created)."
    fi

    if test -z "$VM_OS_FLAVOR" ; then
	cleanup_and_exit 3 "ERROR: No VM openstack flavor set (--os-flavor <FLAVOR-NAME|FLAVOR-ID>)."
    fi

    # set default values

    VM_ROOTDEV="LABEL=obsrootfs"
    VM_SWAPDEV="LABEL=obsswapfs"


    qemu_rootdev=/dev/vda
    VM_VOLUME_GRUB="$VM_KERNEL"
    VM_KERNEL=__not_attached__
    VM_VOLUME_NAME="$VM_IMAGE"
    VM_IMAGE=__not_attached__
    VM_VOLUME_SWAP="$VM_SWAP"
    VM_SWAP=__not_attached__

}

vm_attach_root_openstack() {
    TMP=`cloud_volume_attach_openstack "$VM_SERVER" "$VM_VOLUME_NAME"`
    VM_IMAGE=`echo "$TMP"|cut -d: -f3`
    test "${VM_IMAGE:0:5}" = "/dev/" || cleanup_and_exit 3
    VM_IMAGE_ATTACH_INFO=${TMP:0:73}
}

vm_attach_swap_openstack() {
    TMP=`cloud_volume_attach_openstack "$VM_SERVER" "$VM_VOLUME_SWAP"`
    VM_SWAP=`echo "$TMP"|cut -d: -f3`
    test "${VM_SWAP:0:5}" = "/dev/" || cleanup_and_exit 3
    VM_SWAP_ATTACH_INFO=${TMP:0:73}
}

vm_detach_root_openstack() {
    VM_IMAGE=`cloud_volume_detach_openstack "$VM_IMAGE_ATTACH_INFO"`
    VM_IMAGE_ATTACH_INFO=__not_attached__
    VM_IMAGE=__not_attached__
}

vm_detach_swap_openstack() {
    VM_SWAP=`cloud_volume_detach_openstack "$VM_SWAP_ATTACH_INFO"`
    VM_SWAP_ATTACH_INFO=__not_attached__
    VM_SWAP=__not_attached__
}

vm_cleanup_openstack() {
    vm_detach_root_openstack
    vm_detach_swap_openstack
}

vm_fixup_openstack() {
    # No way to handle this via init= parameter here....
    echo "#!/bin/sh"               >  "$BUILD_ROOT/sbin/init"
    echo 'echo "exec /.build/build \"$@\""' >> "$BUILD_ROOT/sbin/init"
    echo 'exec /.build/build "$@"' >> "$BUILD_ROOT/sbin/init"
    echo 'echo "Waiting for input"' >> "$BUILD_ROOT/sbin/init"
    echo 'read' >> "$BUILD_ROOT/sbin/init"
    chmod 0755 "$BUILD_ROOT/sbin/init"
}

vm_wipe_openstack() {
    if [ -n "$VM_WORKER" ];then
         $NOVACLIENT delete $VM_WORKER
    fi
}

vm_kill_openstack() {
    if $NOVACLIENT show "$VM_WORKER" >/dev/null 2>&1 ; then
	if ! $NOVACLIENT delete "$VM_WORKER" ; then
            cleanup_and_exit 1 "could not kill openstack vm build $VM_VOLUME_NAME"
	fi
    fi
}
wait_for_delete_instance() {
    FOUND=`$NOVACLIENT list|grep $VM_WORKER`
    while [ -n "$FOUND" ];do
       FOUND=`$NOVACLIENT list|grep $VM_WORKER`
       sleep 1
    done
}

vm_startup_openstack() {
    VM_VOL_ROOT_ID=`cinder_volume2id ${VM_VOLUME_NAME}`    
    VM_VOL_SWAP_ID=`cinder_volume2id ${VM_VOLUME_SWAP}`
    VM_VOL_BOOT_ID=`cinder_volume2id ${VM_VOLUME_GRUB}`

    OUTPUT=`\
      $NOVACLIENT boot \
	--flavor $VM_OS_FLAVOR \
	--block-device source=volume,dest=volume,bootindex=0,id=${VM_VOL_BOOT_ID}\
	--block-device source=volume,dest=volume,bootindex=1,id=${VM_VOL_ROOT_ID}\
	--block-device source=volume,dest=volume,bootindex=2,id=${VM_VOL_SWAP_ID}\
	--poll "$VM_WORKER" || cleanup_and_exit 3\
    `
    WS_URL=`$NOVACLIENT get-serial-console $VM_WORKER|grep serial |perl -p -e 's#.*(ws://.*) \|#$1#'`
 
    while [ -z "$WS_URL" -a $COUNTER -gt 0 ];do
      WS_URL=`$NOVACLIENT get-serial-console $VM_WORKER|grep serial |perl -p -e 's#.*(ws://.*) \|#$1#'`
      sleep 1
      COUNTER=$(($COUNTER - 1))
    done

    VM_BUILD_ID=`_get_field "$OUTPUT" id`

    if ! $BUILD_DIR/openstack-console "${WS_URL}";then
      $NOVACLIENT delete $VM_BUILD_ID
      cleanup_and_exit 3
    else
      $NOVACLIENT delete $VM_BUILD_ID
      wait_for_delete_instance
    fi
}

