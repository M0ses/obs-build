#!/usr/bin/python
# This tool is based on novaconsole
# https://github.com/larsks/novaconsole/

import os
import sys
import argparse
import websocket
import tty
import termios
import logging
import select
import socket
import re

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('url')
    return p.parse_args()

def process_line(line_buffer):
    if re.match("\[\s*[0-9\.]*]\s+reboot: Power down",line_buffer):
        raise UserExit

    if re.match("\s*Failed to boot both default and fallback entries.",line_buffer):
        sys.stderr.write("Found 'Press any key' in non-interactive session")
        sys.stderr.flush()
        raise SystemExit(1)

def run_until_exit():
    global args

    ws = websocket.create_connection(args.url,
                                     header={
                                         'Sec-WebSocket-Protocol: binary',
                                     })

    poll = select.poll()
    poll.register(ws, select.POLLIN)
    poll.register(sys.stdin, select.POLLIN)

    line_buffer = ""
    while True:
        events = poll.poll()
        for fd, event in events:
            if fd == ws.fileno():
                data = ws.recv()
                sys.stdout.write(data)
                for c in data:
                    # reset line buffer on carrige return
                    if (re.match("(\r|\n)",c)):
                         process_line(line_buffer)
                         line_buffer = ""
                    else:
                        line_buffer += c
                

            elif fd == sys.stdin.fileno():
                # do nothing  then read the data
                # as we are not in an interactive session
                data = sys.stdin.read(1)


def main():
    global args
    args = parse_args()

    logging.basicConfig(
        level=logging.DEBUG)

    try:
        old_settings = termios.tcgetattr(sys.stdin)
        print '*** connected (type "%s." to exit)' % args.escape
        try:
            tty.setraw(sys.stdin)
            run_until_exit()
        finally:
            # Make sure we restore terminal state
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    except socket.error:
        print '*** failed to connecto to websocket'
    except websocket.WebSocketConnectionClosedException:
        print '*** remote closed connection'
    except UserExit:
        print '*** disconnected'

if __name__ == '__main__':
    main()
